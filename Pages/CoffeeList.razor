@page "/coffee-list"
@using System.Collections.Generic

<h2>Available Coffee</h2>
<div class="height d-flex justify-content-center align-items-center">

    @foreach (var (item, index) in items.Select((item, index) => (item, index)))
    {
        <div class="card p-3">
            <div class="d-flex justify-content-between align-items-center">
                <div class="mt-2">
                    <h4 class="text-uppercase">@item.Brand</h4>
                    <div class="mt-5">
                        <h5 class="text-uppercase mb-0">@item.ProductName</h5>
                        <h1 class="main-heading mt-0">@item.ProductType</h1>
                    </div>
                </div>
                <div class="image">
                    <img src="@item.ImageUrl" width="150" height="150">
                </div>
            </div>
            <div class="quantity-controls mt-3">
                <div class="input-group">
                    <span class="input-group-text mb-1">Price: Rs.@item.Price</span>
                    <div class="quantity-buttons d-flex align-items-center">
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseQuantity(item)">-</button>
                        <input type="text" class="form-control" id="quantity" @bind="item.Quantity">
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => IncreaseQuantity(item)">+</button>
                    </div>
                    <div class="double  d-flex">
                        <div class="total-price">
                            <span class="input-group-text mt-1 mb-1">Total Price: Rs.@CalculateTotalPrice(item)</span>
                           
                        </div>
                        <div>
                            <select id="@($"AddIns_{index}")" class="form-control ms-2" multiple style="height: 30px; width: 150px; overflow-y: auto;">
                                <!-- Iterate through the list of add-ins and create an option for each -->
                                @foreach (var addIns in addInsList)
                                {
                                    <option value="@addIns.Id">@addIns.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    
                </div>
            </div>
            <button class="btn btn-danger" @onclick:preventDefault="true" @onclick="@(e => HandleOrder(item,index))">Order</button>
        </div>
    }

</div>

@code{
    public List<AddIns> addInsList = new List<AddIns>();

    AddIns addins = new AddIns();

    // List to store selected hobby Ids
    private List<Guid> selectedAddIns = new List<Guid>();

    // Initialization method runs when the component i.e. Form.razor is initialized
    protected override void OnInitialized()
    {
        // Retrieve the list of available hobbies
        addInsList = AddInsServices.RetrieveAddInsData();
        base.OnInitialized();
    }

    private List<CoffeeItem> items = new List<CoffeeItem>
	{
        new CoffeeItem { Brand = "Everest", ProductName = "Coffee Beans", ProductType = "Beans", ImageUrl = "https://th.bing.com/th?id=OIP.xZ4VQKpf4Tb6fMaCG7ettQHaHa&w=250&h=250&c=8&rs=1&qlt=90&o=6&dpr=1.1&pid=3.1&rm=2", Price = 100, Quantity = 1 },
        new CoffeeItem { Brand = "Everest", ProductName = "Coffee Beans", ProductType = "Beans", ImageUrl = "https://th.bing.com/th?id=OIP.xZ4VQKpf4Tb6fMaCG7ettQHaHa&w=250&h=250&c=8&rs=1&qlt=90&o=6&dpr=1.1&pid=3.1&rm=2", Price = 100, Quantity = 1 },
        new CoffeeItem { Brand = "Everest", ProductName = "Coffee Beans", ProductType = "Beans", ImageUrl = "https://th.bing.com/th/id/OIP.tOveJnmc__DGzRYxzQ8stwHaIQ?w=168&h=188&c=7&r=0&o=5&dpr=1.1&pid=1.7", Price = 500, Quantity = 1 },
        new CoffeeItem { Brand = "Everest", ProductName = "Coffee Beans", ProductType = "Beans", ImageUrl = "https://th.bing.com/th/id/OIP.ByBwvq2IWsoSMOAQWAV8tAHaEo?w=262&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7", Price = 300, Quantity = 1 },
        new CoffeeItem { Brand = "Everest", ProductName = "Coffee Beans", ProductType = "Beans", ImageUrl = "https://th.bing.com/th/id/OIP.ByBwvq2IWsoSMOAQWAV8tAHaEo?w=262&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7", Price = 300, Quantity = 1 },
		new CoffeeItem { Brand = "Himalayan", ProductName = "Blanda Matt", ProductType = "VASE", ImageUrl = "https://th.bing.com/th/id/OIP.PGflPWglidy4zgLdOsHiDAHaEo?w=272&h=180&c=7&r=0&o=5&dpr=1.1&pid=1.7", Price = 200, Quantity = 1}
    };


    private void IncreaseQuantity(CoffeeItem item)
    {
        item.Quantity++;
    }

    private void DecreaseQuantity(CoffeeItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
        }
    }
    private decimal CalculateTotalPrice(CoffeeItem item)
    {
        return item.Price * item.Quantity;
    }
    public class CoffeeItem
    {
        public string Brand { get; set; }
        public string ProductName { get; set; }
        public string ProductType { get; set; }
        public string ImageUrl { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public string Description { get; set; }
    }



    public async void HandleOrder(CoffeeItem item, int index)
    {
        // Create a list to store selected add-ins
        var selectedAddIns = new List<AddIns>();

        // Get the selected add-ins Ids directly from the multiselect JavaScript function
        var selectedAddInsIds = await JSRuntime.InvokeAsync<string[]>("multiselect.getSelectedValues", $"AddIns_{index}");

        // Iterate through the selected add-ins Ids and find the corresponding AddIns objects
        foreach (var addInId in selectedAddInsIds)
        {
            var addIn = addInsList.FirstOrDefault(a => a.Id == Guid.Parse(addInId));
            if (addIn != null)
            {
                selectedAddIns.Add(addIn);
            }
        }

        // Calculate the total price, including the prices of selected add-ins
        decimal totalPrice = CalculateTotalPrice(item) + selectedAddIns.Sum(addIn => decimal.Parse(addIn.Price));

        // Create an order and set its properties
        Order order = new Order
            {
                OrderName = $"{item.Brand} - {item.ProductName}",
                TotalPrice = totalPrice,
                AddIns = selectedAddIns
            };

        // Save the order details using the OrderService (replace with your actual service)
        OrderService.SaveFormDataInJson(order);

        // Display a success alert or perform other actions as needed
        App.Current.MainPage.DisplayAlert("Success", "Order Placed Successfully", "Ok");
    }



}